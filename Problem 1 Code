 

Problem 1: - 

 

The Fibonacci sequence is the series of numbers 0, 1, 1, 2, 3, 5, 8…… Formally, it can be expressed as: fib0 = 0 

fib1 = 1 

fib n = fib n−1 + fib n−2 

Write a multithreaded program that generates the Fibonacci sequence. This program should work as follows: On the command line, the user will enter the number of Fibonacci numbers that the program is to generate. The program will then create a separate thread that will generate the Fibonacci numbers, placing the sequence in data that can be shared by the threads (an array is probably the most convenient data structure). When the thread finishes execution, the parent thread will output the sequence generated by the child thread. Because the parent thread cannot begin outputting the Fibonacci sequence until the child thread finishes, the parent thread will have to wait for the child thread to finish. 

 
 
 Solution: - 

 

 

 

#include<unistd.h> 

#include<pthread.h> 

#include<stdio.h> 

int  a=0; 

long  f[400]; 

int i; 

void  *fun(void  *b) 

{ 

if(a<=0) 

pthread_exit(0); 

f[0]=0; 

if(a>1) 

{ 

f[1]=1; 

for(i=2;i<a;i++) 

f[i]=f[i-1]+f[i-2]; 

} 

pthread_exit(0); 

} 

int  main(int  c,  char  *cf[]) 

{ 

pthread_t  id; 

pthread_attr_t  attr; 

pthread_attr_init(&attr); 

printf("  no  Fib  ser:  "); 

 

scanf("%d",&a); 

if(a>400) 

{ 

printf("Print  only  400"); 

a=500; 

} 

pthread_create(&id,  &attr,  fun,  cf[1]); 

pthread_join(id,NULL); 

if(a>0) 

printf("%ld",f[0]); 

for(i=1;i<a;i++) 

printf(",%ld",f[i]); 

printf("\n"); 

return  0; 
}

 
